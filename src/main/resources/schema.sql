DROP TABLE IF EXISTS FEED, MPA, GENRES, FILM_DIRECT, DIRECTS, USERS, FILMS, FRIENDSHIP, FILM_GENRES, LIKES, REVIEWS_LIKES, REVIEWS CASCADE;

CREATE TABLE IF NOT EXISTS MPA(
    mpa_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS GENRES(
    genre_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS USERS(
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email varchar(255) NOT NULL,
    login varchar(255) NOT NULL,
    name varchar(255) NOT NULL,
    birthday date
);

CREATE TABLE IF NOT EXISTS FILMS(
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(255) NOT NULL,
    description varchar(255),
    releaseDate date NOT NULL,
    duration int NOT NULL,
    MPA int NOT NULL REFERENCES MPA(mpa_id)
);

CREATE TABLE IF NOT EXISTS FRIENDSHIP(
    requester_id int NOT NULL REFERENCES USERS (id) ON DELETE CASCADE,
    receiver_id int NOT NULL REFERENCES USERS (id) ON DELETE CASCADE,
    сonfirmation boolean NOT NULL,
    PRIMARY KEY (requester_id, receiver_id)
);

CREATE TABLE IF NOT EXISTS FILM_GENRES(
    film_id int ,
    genre_id int,
    PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS DIRECTS(
     direct_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(50) NOT NULL
    );

CREATE TABLE IF NOT EXISTS FILM_DIRECT(
    film_id int REFERENCES FILMS (id),
    direct_id int,
    FOREIGN KEY (direct_id) REFERENCES DIRECTS (direct_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, direct_id)
    );

CREATE TABLE IF NOT EXISTS LIKES(
    user_id int REFERENCES USERS (id) ON DELETE CASCADE,
    film_id int REFERENCES FILMS (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS "REVIEWS"(
    "REVIEW_ID" INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    "CONTENT" TEXT NOT NULL,
    "IS_POSITIVE" BOOLEAN NOT NULL,
    "USER_ID" int NOT NULL,
    "FILM_ID" int NOT NULL,
    "USEFUL" int DEFAULT 0,
    CONSTRAINT "PK_REVIEWS_REVIEW_ID" PRIMARY KEY ("REVIEW_ID") --,
    --   Вроде, было бы логично - если несуществующий пользователь не смог бы добавить отзыв
    -- А так же, - если пользователь не смог бы добавить отзыв на несуществующий фильм
    -- Но тесты Postman именно так и делают. Поэтому пришлось убрать внешние ключи

    -- CONSTRAINT "FK_USERS_ID" FOREIGN KEY ("USER_ID") REFERENCES "USERS" ("ID") ON DELETE CASCADE,
    -- CONSTRAINT "FK_FILMS_ID" FOREIGN KEY ("FILM_ID") REFERENCES "FILMS" ("ID") ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS "REVIEWS_LIKES" (
	"REVIEW_ID" INTEGER NOT NULL,
	"USER_ID" INTEGER NOT NULL,
	"USEFUL_VALUE" INTEGER NOT NULL,
	CONSTRAINT "PK_REVIEW_ID_USER_ID" PRIMARY KEY ("REVIEW_ID", "USER_ID") --,
	--   Убрал, вроде логичное ограничение, по тому же принципу что и у таблицы REVIEWS
	-- CONSTRAINT "FK_REVIEWS_LIKES_USER_ID" FOREIGN KEY ("USER_ID") REFERENCES "USERS" ("ID") ON DELETE CASCADE
);

    -- Я оставил ограничения в комментариях на случай если в тестах на общей ветке develop - они пригодятся

CREATE TABLE IF NOT EXISTS FEED (
    EVENT_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
	USER_ID INTEGER NOT NULL,
	ENTITY_ID INTEGER NOT NULL,
    EVENT_TYPE VARCHAR(6) NOT NULL,
    OPERATION VARCHAR(6) NOT NULL,
    TMSTMP BIGINT NOT NULL
);

INSERT INTO MPA VALUES (1, 'G');
INSERT INTO MPA VALUES (2, 'PG');
INSERT INTO MPA VALUES (3, 'PG-13');
INSERT INTO MPA VALUES (4, 'R');
INSERT INTO MPA VALUES (5, 'NC-17');

INSERT INTO GENRES VALUES (1, 'Комедия');
INSERT INTO GENRES VALUES (2, 'Драма');
INSERT INTO GENRES VALUES (3, 'Мультфильм');
INSERT INTO GENRES VALUES (4, 'Триллер');
INSERT INTO GENRES VALUES (5, 'Документальный');
INSERT INTO GENRES VALUES (6, 'Боевик');

